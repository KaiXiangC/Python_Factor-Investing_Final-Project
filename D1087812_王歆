{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KaiXiangC/Python_Factor-Investing_Final-Project/blob/main/D1087812_%E7%8E%8B%E6%AD%86\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **策略715-盈餘加速成長**"
      ],
      "metadata": {
        "id": "VYp1rKhg-Xfe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1.0 安裝套件 & 環境"
      ],
      "metadata": {
        "id": "oHoyknhRK62w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install xgboost\n",
        "!wget https://launchpad.net/~mario-mariomedina/+archive/ubuntu/talib/+files/libta-lib0_0.4.0-oneiric1_amd64.deb -qO libta.deb\n",
        "!wget https://launchpad.net/~mario-mariomedina/+archive/ubuntu/talib/+files/ta-lib0-dev_0.4.0-oneiric1_amd64.deb -qO ta.deb\n",
        "#!dpkg -i libta.deb ta.deb\n",
        "#!pip install ta-lib\n",
        "!pip install mpl_finance\n",
        "!pip install mglearn\n",
        "!wget -O TaipeiSansTCBeta-Regular.ttf https://drive.google.com/uc?id=1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_&export=download"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MFbTppUdgJn_",
        "outputId": "a502abf8-bcb6-4f0e-c7a5-225bcbc01380"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.23.5)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from xgboost) (1.11.4)\n",
            "Requirement already satisfied: mpl_finance in /usr/local/lib/python3.10/dist-packages (0.10.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from mpl_finance) (3.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (1.2.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (4.46.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (1.4.5)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (1.23.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (23.2)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (9.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mpl_finance) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->mpl_finance) (1.16.0)\n",
            "Requirement already satisfied: mglearn in /usr/local/lib/python3.10/dist-packages (0.2.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from mglearn) (1.23.5)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from mglearn) (3.7.1)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from mglearn) (1.2.2)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from mglearn) (1.5.3)\n",
            "Requirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from mglearn) (9.4.0)\n",
            "Requirement already satisfied: cycler in /usr/local/lib/python3.10/dist-packages (from mglearn) (0.12.1)\n",
            "Requirement already satisfied: imageio in /usr/local/lib/python3.10/dist-packages (from mglearn) (2.31.6)\n",
            "Requirement already satisfied: joblib in /usr/local/lib/python3.10/dist-packages (from mglearn) (1.3.2)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mglearn) (1.2.0)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mglearn) (4.46.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mglearn) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mglearn) (23.2)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mglearn) (3.1.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->mglearn) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->mglearn) (2023.3.post1)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->mglearn) (1.11.4)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->mglearn) (3.2.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->mglearn) (1.16.0)\n",
            "--2023-12-29 08:12:02--  https://drive.google.com/uc?id=1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_\n",
            "Resolving drive.google.com (drive.google.com)... 142.251.2.100, 142.251.2.113, 142.251.2.139, ...\n",
            "Connecting to drive.google.com (drive.google.com)|142.251.2.100|:443... connected.\n",
            "HTTP request sent, awaiting response... 303 See Other\n",
            "Location: https://doc-0k-9o-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/nfnfdi0d8cs0867p8s6h7pvb9u1r243v/1703837475000/02847987870453524430/*/1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_?uuid=a9eac345-ff3f-4007-ae44-ca985a8c4975 [following]\n",
            "Warning: wildcards not supported in HTTP.\n",
            "--2023-12-29 08:12:03--  https://doc-0k-9o-docs.googleusercontent.com/docs/securesc/ha0ro937gcuc7l7deffksulhg5h7mbp1/nfnfdi0d8cs0867p8s6h7pvb9u1r243v/1703837475000/02847987870453524430/*/1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_?uuid=a9eac345-ff3f-4007-ae44-ca985a8c4975\n",
            "Resolving doc-0k-9o-docs.googleusercontent.com (doc-0k-9o-docs.googleusercontent.com)... 142.250.101.132, 2607:f8b0:4023:c06::84\n",
            "Connecting to doc-0k-9o-docs.googleusercontent.com (doc-0k-9o-docs.googleusercontent.com)|142.250.101.132|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 20659344 (20M) [application/x-font-ttf]\n",
            "Saving to: ‘TaipeiSansTCBeta-Regular.ttf’\n",
            "\n",
            "TaipeiSansTCBeta-Re 100%[===================>]  19.70M  64.2MB/s    in 0.3s    \n",
            "\n",
            "2023-12-29 08:12:04 (64.2 MB/s) - ‘TaipeiSansTCBeta-Regular.ttf’ saved [20659344/20659344]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "lDfNLgl2Ixrw"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import warnings\n",
        "from pandas.tseries.offsets import MonthEnd\n",
        "#------------------機器學習套件-------------------#\n",
        "import sklearn\n",
        "# 模型套件\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.gaussian_process import GaussianProcessClassifier\n",
        "from sklearn.gaussian_process.kernels import RBF\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.ensemble import AdaBoostRegressor\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis\n",
        "from sklearn.linear_model import RidgeClassifier\n",
        "# import talib #計算技術指標套件\n",
        "import matplotlib.pyplot as plt #繪圖套件\n",
        "import matplotlib.dates as mdates\n",
        "import matplotlib.ticker as mticker\n",
        "import seaborn as sns\n",
        "from matplotlib.colors import LinearSegmentedColormap\n",
        "from datetime import datetime\n",
        "import seaborn as sns\n",
        "import xgboost\n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "#-----------------中文字體------------------------#\n",
        "import matplotlib as mpl\n",
        "from matplotlib.font_manager import fontManager\n",
        "\n",
        "fontManager.addfont('TaipeiSansTCBeta-Regular.ttf')\n",
        "mpl.rc('font', family='Taipei Sans TC Beta')\n",
        "\n",
        "plt.style.use('ggplot')\n",
        "plt.rcParams.update({\n",
        "    'font.weight': 'bold',\n",
        "    'text.color': 'k',\n",
        "    'axes.labelcolor': 'k',\n",
        "    'xtick.color': 'k',\n",
        "    'ytick.color': 'k'})\n",
        "warnings.simplefilter(action='ignore', category=Warning)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UBr4FezRJIQO",
        "outputId": "a8728c62-f062-40d6-e44a-a9b76475b7a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_price1 = pd.read_feather('/content/drive/MyDrive/FCU_20231208/Data//價量資料.feather')\n",
        "df_price2 = pd.read_feather('/content/drive/MyDrive/FCU_20231208/Data//加權報酬指數.feather')\n",
        "df_price3 = pd.read_feather('/content/drive/MyDrive/FCU_20231208/Data//季財報資料.feather')\n",
        "df_price4 = pd.read_feather('/content/drive/MyDrive/FCU_20231208/Data//月營收資料.feather')\n",
        "df_price5 = pd.read_feather('/content/drive/MyDrive/FCU_20231208/Data//籌碼資料.feather')"
      ],
      "metadata": {
        "id": "QA8VjXqRJD-B"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2.0 股票因子計算"
      ],
      "metadata": {
        "id": "vU0SsvywK_ze"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 證券名稱、資料日、收盤價、成交量、普通股股本、月營收、股東權益總計\n",
        "df_1 = df_price1[['證券名稱','資料日','收盤價']]\n",
        "df_2 = df_price3[['證券名稱','編表日','普通股股本','營業利益']]\n",
        "df_3 = df_price4[['證券名稱','營收發布日','單月營收(千元)']]\n",
        "\n",
        "df_3['月營收_YoY'] = df_3.groupby('證券名稱').apply(lambda x: (x['單月營收(千元)'] - x['單月營收(千元)'].shift(12)) / x['單月營收(千元)'].shift(12)).reset_index(level=0,drop=True)\n",
        "# df_2['營利率'] = df_2['營業利益'] / df_2['營業收入']\n",
        "df_2['營業利益_QoQ'] = df_2.groupby('證券名稱').apply(lambda x: (x['營業利益'] - x['營業利益'].shift(1)) / x['營業利益'].shift(1)).reset_index(level=0,drop=True)"
      ],
      "metadata": {
        "id": "Z6XlptV8JJe_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3.0 合併各類因子資料\n",
        "- 根據前一部份計算整理，列出想要放入模型的因子 (需保留`收盤價`欄位)\n",
        "- 合併部份基本無需更動，確認最後產出之dataframe無缺失值、重複值、inf(無限大值)，且資料合理即可"
      ],
      "metadata": {
        "id": "fKEJT7y4LMkn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 將價量以外因子(籌碼、月營收、財報因子)，mapping至日頻率\n",
        "df_3.drop_duplicates(subset=['證券名稱','營收發布日'],inplace=True)\n",
        "df_3 = df_3.reset_index(drop=True)\n",
        "\n",
        "df_2.drop_duplicates(subset=['證券名稱','編表日'],inplace=True)\n",
        "df_2 = df_2.reset_index(drop=True)\n",
        "\n",
        "df_1['資料日'] = pd.to_datetime(df_1['資料日'])\n",
        "df_1.set_index('資料日', inplace=True)\n",
        "df_1 = df_1.groupby('證券名稱').resample('D').ffill().reset_index(level=0,drop=True)\n",
        "df_1 = df_1.sort_values(by=['證券名稱','資料日']).reset_index()\n",
        "\n",
        "df_3['營收發布日'] = pd.to_datetime(df_3['營收發布日'])\n",
        "df_3.set_index('營收發布日', inplace=True)\n",
        "df_3 = df_3.groupby('證券名稱').resample('D').ffill().reset_index(level=0,drop=True)\n",
        "df_3 = df_3.sort_values(by=['證券名稱','營收發布日']).reset_index()\n",
        "\n",
        "df_2['編表日'] = pd.to_datetime(df_2['編表日'])\n",
        "df_2.set_index('編表日', inplace=True)\n",
        "df_2 = df_2.groupby('證券名稱').resample('D').ffill().reset_index(level=0,drop=True)\n",
        "df_2 = df_2.sort_values(by=['證券名稱','編表日']).reset_index()"
      ],
      "metadata": {
        "id": "tP2ryeh_LNbU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 以價量資料(台股交易日)為基準，合併不同頻率之資料\n",
        "df_all_factor = df_1.copy()\n",
        "\n",
        "# merge: 合併兩個dataframe，on=合併基準欄位，how=以哪個dataframe為準)\n",
        "df_all_factor = pd.merge(df_all_factor, df_3, left_on=['證券名稱', '資料日'], right_on=['證券名稱', '營收發布日'], how='left')\n",
        "df_all_factor = pd.merge(df_all_factor, df_2, left_on=['證券名稱', '資料日'], right_on=['證券名稱', '編表日'], how='left')\n",
        "\n",
        "df_all_factor.drop(columns=['營收發布日','編表日'],inplace=True)"
      ],
      "metadata": {
        "id": "uJZyvmlXLRAE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 把inf(除以0)填補成缺失值，以利後續一併刪除\n",
        "df_all_factor.replace([np.inf, -np.inf], np.NaN, inplace=True)\n",
        "\n",
        "# 刪除含有缺失值之資料行\n",
        "df_all_factor.dropna(inplace=True)\n",
        "df_all_factor = df_all_factor.sort_values(by=['證券名稱','資料日']).reset_index(level=0,drop=True)"
      ],
      "metadata": {
        "id": "KBEIn--_LKzE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 數據圖繪製"
      ],
      "metadata": {
        "id": "wgsxHiraWNxu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_data_train_plot = df_all_factor[df_all_factor['證券名稱'] == '1456怡華'].copy()\n",
        "\n",
        "plt.figure(figsize=(20,10))\n",
        "ax1 = plt.subplot(4,1,1)\n",
        "plt.title('營業利益_QoQ')\n",
        "plt.plot(df_data_train_plot['資料日'],df_data_train_plot['營業利益_QoQ'])\n",
        "\n",
        "ax2 = plt.subplot(4,1,2)\n",
        "plt.title('月營收_YoY')\n",
        "plt.plot(df_data_train_plot['資料日'],df_data_train_plot['月營收_YoY'])\n",
        "\n",
        "ax3 = plt.subplot(4,1,3)\n",
        "plt.title('收盤價')\n",
        "plt.plot(df_data_train_plot['資料日'],df_data_train_plot['收盤價'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 437
        },
        "id": "lLAEm7s4WfmT",
        "outputId": "075fdfba-756d-42dc-c3df-337367690a5a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7bf325115e70>]"
            ]
          },
          "metadata": {},
          "execution_count": 107
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1000 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 依據各指標特性，制定篩選規則\n",
        "df_select = df_all_factor.copy()\n",
        "\n",
        "# 2.股本<20億、收盤價<100、連續三季營業利益成長、連續兩個月YoY>1%\n",
        "df_select = df_select[(df_all_factor['收盤價']<=100) & (df_all_factor['月營收_YoY']>1) & (df_all_factor['月營收_YoY'].shift(1)>1) & (df_all_factor['營業利益']>=df_all_factor['營業利益'].shift(1))& (df_all_factor['營業利益'].shift(1)>=df_all_factor['營業利益'].shift(2))]\n",
        "\n",
        "# 3.按營業利益排序，每月選出前15名個股\n",
        "# df_select = df_select.groupby('資料日').apply(lambda x: x.sort_values(by='營業利益', ascending=False).head(15))\n",
        "\n",
        "df_select.reset_index(drop=True, inplace=True)\n",
        "\n",
        "# 抽樣驗證\n",
        "df_select[df_select['資料日']=='2023-11-01']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "3H1W6j5CLXxw",
        "outputId": "4a6f96fc-58e7-43f6-b0ba-0c552f28376b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              資料日     證券名稱    收盤價   單月營收(千元)    月營收_YoY       普通股股本      營業利益  \\\n",
              "950    2023-11-01  1314中石化  10.30  2843927.0   1.086115  37848502.0 -797635.0   \n",
              "2871   2023-11-01  1437勤益控  29.55   126347.0   1.038480   2033713.0   82525.0   \n",
              "4245   2023-11-01   1442名軒  35.75   145188.0  24.615385   3662113.0   69502.0   \n",
              "6022   2023-11-01   1456怡華  16.25   216090.0   3.316793    937200.0  220056.0   \n",
              "8215   2023-11-01   1515力山  39.60   796888.0   1.564047   1814735.0  -16686.0   \n",
              "...           ...      ...    ...        ...        ...         ...       ...   \n",
              "115994 2023-11-01  8087華鎂鑫  48.95    11743.0   7.796255    290690.0  -12012.0   \n",
              "118835 2023-11-01  8473山林水  27.10   323820.0   1.462940   1470040.0   99528.0   \n",
              "120348 2023-11-01  8926台汽電  39.80   661153.0   1.451039   6890486.0 -123234.0   \n",
              "120586 2023-11-01   8932智通  81.30    87012.0   1.088472    666101.0   48745.0   \n",
              "121977 2023-11-01   9902台火  12.05    36696.0  98.717391    980496.0   -6480.0   \n",
              "\n",
              "        營業利益_QoQ  \n",
              "950    -0.145643  \n",
              "2871   -0.021253  \n",
              "4245   -0.596432  \n",
              "6022    9.806128  \n",
              "8215   -0.785350  \n",
              "...          ...  \n",
              "115994  0.125035  \n",
              "118835  0.364425  \n",
              "120348 -2.906644  \n",
              "120586  5.445194  \n",
              "121977  0.888112  \n",
              "\n",
              "[73 rows x 8 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-80d24f95-0bce-414b-934b-35de6a97b06c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>資料日</th>\n",
              "      <th>證券名稱</th>\n",
              "      <th>收盤價</th>\n",
              "      <th>單月營收(千元)</th>\n",
              "      <th>月營收_YoY</th>\n",
              "      <th>普通股股本</th>\n",
              "      <th>營業利益</th>\n",
              "      <th>營業利益_QoQ</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>950</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1314中石化</td>\n",
              "      <td>10.30</td>\n",
              "      <td>2843927.0</td>\n",
              "      <td>1.086115</td>\n",
              "      <td>37848502.0</td>\n",
              "      <td>-797635.0</td>\n",
              "      <td>-0.145643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2871</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1437勤益控</td>\n",
              "      <td>29.55</td>\n",
              "      <td>126347.0</td>\n",
              "      <td>1.038480</td>\n",
              "      <td>2033713.0</td>\n",
              "      <td>82525.0</td>\n",
              "      <td>-0.021253</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4245</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1442名軒</td>\n",
              "      <td>35.75</td>\n",
              "      <td>145188.0</td>\n",
              "      <td>24.615385</td>\n",
              "      <td>3662113.0</td>\n",
              "      <td>69502.0</td>\n",
              "      <td>-0.596432</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6022</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1456怡華</td>\n",
              "      <td>16.25</td>\n",
              "      <td>216090.0</td>\n",
              "      <td>3.316793</td>\n",
              "      <td>937200.0</td>\n",
              "      <td>220056.0</td>\n",
              "      <td>9.806128</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8215</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1515力山</td>\n",
              "      <td>39.60</td>\n",
              "      <td>796888.0</td>\n",
              "      <td>1.564047</td>\n",
              "      <td>1814735.0</td>\n",
              "      <td>-16686.0</td>\n",
              "      <td>-0.785350</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>115994</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>8087華鎂鑫</td>\n",
              "      <td>48.95</td>\n",
              "      <td>11743.0</td>\n",
              "      <td>7.796255</td>\n",
              "      <td>290690.0</td>\n",
              "      <td>-12012.0</td>\n",
              "      <td>0.125035</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118835</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>8473山林水</td>\n",
              "      <td>27.10</td>\n",
              "      <td>323820.0</td>\n",
              "      <td>1.462940</td>\n",
              "      <td>1470040.0</td>\n",
              "      <td>99528.0</td>\n",
              "      <td>0.364425</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120348</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>8926台汽電</td>\n",
              "      <td>39.80</td>\n",
              "      <td>661153.0</td>\n",
              "      <td>1.451039</td>\n",
              "      <td>6890486.0</td>\n",
              "      <td>-123234.0</td>\n",
              "      <td>-2.906644</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>120586</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>8932智通</td>\n",
              "      <td>81.30</td>\n",
              "      <td>87012.0</td>\n",
              "      <td>1.088472</td>\n",
              "      <td>666101.0</td>\n",
              "      <td>48745.0</td>\n",
              "      <td>5.445194</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>121977</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>9902台火</td>\n",
              "      <td>12.05</td>\n",
              "      <td>36696.0</td>\n",
              "      <td>98.717391</td>\n",
              "      <td>980496.0</td>\n",
              "      <td>-6480.0</td>\n",
              "      <td>0.888112</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>73 rows × 8 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-80d24f95-0bce-414b-934b-35de6a97b06c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-80d24f95-0bce-414b-934b-35de6a97b06c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-80d24f95-0bce-414b-934b-35de6a97b06c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8e5666e8-86ee-4326-91c9-4dd853b0d378\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e5666e8-86ee-4326-91c9-4dd853b0d378')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8e5666e8-86ee-4326-91c9-4dd853b0d378 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 108
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 每日選股名單\n",
        "df_select_d = df_select[['資料日','證券名稱','收盤價']].sort_values(by=['資料日','證券名稱'])\n",
        "\n",
        "# 每月第一個交易日之選股名單\n",
        "df_select_d['年月'] = df_select_d['資料日'].dt.strftime('%Y-%m')\n",
        "reb_date = df_select_d[['年月','資料日']].sort_values(by='資料日').drop_duplicates(subset=['年月'], keep = 'first').reset_index(drop=True)\n",
        "df_select_m = df_select_d[df_select_d['資料日'].isin(reb_date['資料日'])].copy().reset_index(drop=True)\n",
        "\n",
        "df_select_m[df_select_m['資料日']=='2023-11-01']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "rbGHzSApL0_M",
        "outputId": "fbe3ab5a-1e8f-4873-fc76-e9dc0adcf2fa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            資料日     證券名稱    收盤價       年月\n",
              "4087 2023-11-01  1314中石化  10.30  2023-11\n",
              "4088 2023-11-01  1437勤益控  29.55  2023-11\n",
              "4089 2023-11-01   1442名軒  35.75  2023-11\n",
              "4090 2023-11-01   1456怡華  16.25  2023-11\n",
              "4091 2023-11-01   1515力山  39.60  2023-11\n",
              "...         ...      ...    ...      ...\n",
              "4155 2023-11-01  8087華鎂鑫  48.95  2023-11\n",
              "4156 2023-11-01  8473山林水  27.10  2023-11\n",
              "4157 2023-11-01  8926台汽電  39.80  2023-11\n",
              "4158 2023-11-01   8932智通  81.30  2023-11\n",
              "4159 2023-11-01   9902台火  12.05  2023-11\n",
              "\n",
              "[73 rows x 4 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3806c73b-9cff-4f37-ba5c-afd1a4b98509\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>資料日</th>\n",
              "      <th>證券名稱</th>\n",
              "      <th>收盤價</th>\n",
              "      <th>年月</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4087</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1314中石化</td>\n",
              "      <td>10.30</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4088</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1437勤益控</td>\n",
              "      <td>29.55</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4089</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1442名軒</td>\n",
              "      <td>35.75</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4090</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1456怡華</td>\n",
              "      <td>16.25</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4091</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>1515力山</td>\n",
              "      <td>39.60</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4155</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>8087華鎂鑫</td>\n",
              "      <td>48.95</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4156</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>8473山林水</td>\n",
              "      <td>27.10</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4157</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>8926台汽電</td>\n",
              "      <td>39.80</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4158</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>8932智通</td>\n",
              "      <td>81.30</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4159</th>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>9902台火</td>\n",
              "      <td>12.05</td>\n",
              "      <td>2023-11</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>73 rows × 4 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3806c73b-9cff-4f37-ba5c-afd1a4b98509')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3806c73b-9cff-4f37-ba5c-afd1a4b98509 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3806c73b-9cff-4f37-ba5c-afd1a4b98509');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eb91381b-284c-48ef-8df8-7e4efa89ee1e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb91381b-284c-48ef-8df8-7e4efa89ee1e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eb91381b-284c-48ef-8df8-7e4efa89ee1e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 109
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4.0 AdaBoost選股模型"
      ],
      "metadata": {
        "id": "Kb4P8RIBQatw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 特徵集合(因子集合)\n",
        "feature_list = df_all_factor.columns.drop(['證券名稱','資料日','收盤價','普通股股本'])\n",
        "\n",
        "# 取每月第一個交易日的資料\n",
        "df_feature = df_all_factor.copy()\n",
        "df_feature['年月'] = df_feature['資料日'].dt.strftime('%Y-%m')\n",
        "reb_date_all = df_feature[['年月','資料日']].sort_values(by='資料日').drop_duplicates(subset=['年月'], keep = 'first').reset_index(drop=True)\n",
        "df_feature_m = df_feature[df_feature['資料日'].isin(reb_date_all['資料日'])].copy().reset_index(drop=True)"
      ],
      "metadata": {
        "id": "1IgH5Wt9JNIh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 因子標準化\n",
        "def standardize(x):\n",
        "    return (x - x.mean()) / x.std()\n",
        "\n",
        "df_feature_m[feature_list] = df_feature_m.groupby('資料日')[feature_list].apply(standardize).reset_index(level=0,drop=True)\n",
        "df_feature_m.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "KOb0yFcMJO9b",
        "outputId": "934086e3-4eb1-411e-b0ed-3a4f55618806"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         資料日    證券名稱        收盤價  單月營收(千元)   月營收_YoY       普通股股本      營業利益  \\\n",
              "0 2019-03-01  1101台泥  24.444250  0.604688 -0.030092  51080599.0  2.138930   \n",
              "1 2019-04-01  1101台泥  26.322128  0.448883 -0.045742  53080599.0  2.033372   \n",
              "2 2019-05-01  1101台泥  26.735898  0.802731 -0.040875  53080599.0  2.037005   \n",
              "3 2019-06-01  1101台泥  27.308810  0.775974 -0.026439  51080599.0  2.350363   \n",
              "4 2019-07-01  1101台泥  29.377659  0.787658 -0.031428  51080599.0  2.348776   \n",
              "\n",
              "   營業利益_QoQ       年月  \n",
              "0  0.027591  2019-03  \n",
              "1  0.015895  2019-04  \n",
              "2  0.011265  2019-05  \n",
              "3 -0.028264  2019-06  \n",
              "4 -0.028267  2019-07  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-34a1eca5-56ff-400b-b9cd-610fbd3a189a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>資料日</th>\n",
              "      <th>證券名稱</th>\n",
              "      <th>收盤價</th>\n",
              "      <th>單月營收(千元)</th>\n",
              "      <th>月營收_YoY</th>\n",
              "      <th>普通股股本</th>\n",
              "      <th>營業利益</th>\n",
              "      <th>營業利益_QoQ</th>\n",
              "      <th>年月</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2019-03-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>24.444250</td>\n",
              "      <td>0.604688</td>\n",
              "      <td>-0.030092</td>\n",
              "      <td>51080599.0</td>\n",
              "      <td>2.138930</td>\n",
              "      <td>0.027591</td>\n",
              "      <td>2019-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2019-04-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>26.322128</td>\n",
              "      <td>0.448883</td>\n",
              "      <td>-0.045742</td>\n",
              "      <td>53080599.0</td>\n",
              "      <td>2.033372</td>\n",
              "      <td>0.015895</td>\n",
              "      <td>2019-04</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2019-05-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>26.735898</td>\n",
              "      <td>0.802731</td>\n",
              "      <td>-0.040875</td>\n",
              "      <td>53080599.0</td>\n",
              "      <td>2.037005</td>\n",
              "      <td>0.011265</td>\n",
              "      <td>2019-05</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2019-06-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>27.308810</td>\n",
              "      <td>0.775974</td>\n",
              "      <td>-0.026439</td>\n",
              "      <td>51080599.0</td>\n",
              "      <td>2.350363</td>\n",
              "      <td>-0.028264</td>\n",
              "      <td>2019-06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2019-07-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>29.377659</td>\n",
              "      <td>0.787658</td>\n",
              "      <td>-0.031428</td>\n",
              "      <td>51080599.0</td>\n",
              "      <td>2.348776</td>\n",
              "      <td>-0.028267</td>\n",
              "      <td>2019-07</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34a1eca5-56ff-400b-b9cd-610fbd3a189a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-34a1eca5-56ff-400b-b9cd-610fbd3a189a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-34a1eca5-56ff-400b-b9cd-610fbd3a189a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-89ef3914-a425-45aa-8349-d22f1b32aeee\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-89ef3914-a425-45aa-8349-d22f1b32aeee')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-89ef3914-a425-45aa-8349-d22f1b32aeee button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 111
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 計算個股下期報酬，作為模型訓練答案\n",
        "\n",
        "df_feature_m['下期報酬'] = df_feature_m.groupby('證券名稱').apply(lambda x:(x['收盤價'].shift(-1)/x['收盤價']-1)*0.2 +x['月營收_YoY']*0.4 +x['營業利益_QoQ']*0.4).reset_index(level=0,drop=True)\n",
        "df_feature_m.dropna(inplace=True)\n",
        "df_feature_m[df_feature_m['證券名稱'] == '1101台泥'].tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "9Vi1pdbtJRBL",
        "outputId": "d68ff7db-5854-4da0-a161-531828acd1d7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          資料日    證券名稱       收盤價  單月營收(千元)   月營收_YoY       普通股股本      營業利益  \\\n",
              "51 2023-06-01  1101台泥  37.23777  0.585962 -0.040397  71561817.0 -0.046479   \n",
              "52 2023-07-01  1101台泥  37.53370  0.585032 -0.032134  71561817.0 -0.046385   \n",
              "53 2023-08-01  1101台泥  37.55000  0.542795  0.017515  71561817.0 -0.047155   \n",
              "54 2023-09-01  1101台泥  35.25000  0.510289 -0.027184  71561817.0  0.545483   \n",
              "55 2023-10-01  1101台泥  33.25000  0.577062 -0.060160  71561817.0  0.546092   \n",
              "\n",
              "    營業利益_QoQ       年月      下期報酬  \n",
              "51  0.025234  2023-06 -0.004476  \n",
              "52  0.025181  2023-07 -0.002694  \n",
              "53  0.025027  2023-08  0.004766  \n",
              "54  1.513896  2023-09  0.583337  \n",
              "55  1.514828  2023-10  0.574950  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17835aab-193e-4859-a1a0-de424f21d7db\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>資料日</th>\n",
              "      <th>證券名稱</th>\n",
              "      <th>收盤價</th>\n",
              "      <th>單月營收(千元)</th>\n",
              "      <th>月營收_YoY</th>\n",
              "      <th>普通股股本</th>\n",
              "      <th>營業利益</th>\n",
              "      <th>營業利益_QoQ</th>\n",
              "      <th>年月</th>\n",
              "      <th>下期報酬</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>2023-06-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>37.23777</td>\n",
              "      <td>0.585962</td>\n",
              "      <td>-0.040397</td>\n",
              "      <td>71561817.0</td>\n",
              "      <td>-0.046479</td>\n",
              "      <td>0.025234</td>\n",
              "      <td>2023-06</td>\n",
              "      <td>-0.004476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>2023-07-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>37.53370</td>\n",
              "      <td>0.585032</td>\n",
              "      <td>-0.032134</td>\n",
              "      <td>71561817.0</td>\n",
              "      <td>-0.046385</td>\n",
              "      <td>0.025181</td>\n",
              "      <td>2023-07</td>\n",
              "      <td>-0.002694</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>2023-08-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>37.55000</td>\n",
              "      <td>0.542795</td>\n",
              "      <td>0.017515</td>\n",
              "      <td>71561817.0</td>\n",
              "      <td>-0.047155</td>\n",
              "      <td>0.025027</td>\n",
              "      <td>2023-08</td>\n",
              "      <td>0.004766</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>2023-09-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>35.25000</td>\n",
              "      <td>0.510289</td>\n",
              "      <td>-0.027184</td>\n",
              "      <td>71561817.0</td>\n",
              "      <td>0.545483</td>\n",
              "      <td>1.513896</td>\n",
              "      <td>2023-09</td>\n",
              "      <td>0.583337</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>2023-10-01</td>\n",
              "      <td>1101台泥</td>\n",
              "      <td>33.25000</td>\n",
              "      <td>0.577062</td>\n",
              "      <td>-0.060160</td>\n",
              "      <td>71561817.0</td>\n",
              "      <td>0.546092</td>\n",
              "      <td>1.514828</td>\n",
              "      <td>2023-10</td>\n",
              "      <td>0.574950</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17835aab-193e-4859-a1a0-de424f21d7db')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-17835aab-193e-4859-a1a0-de424f21d7db button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-17835aab-193e-4859-a1a0-de424f21d7db');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3f9b9d28-94ce-4de0-bf70-5266c27737ce\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3f9b9d28-94ce-4de0-bf70-5266c27737ce')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3f9b9d28-94ce-4de0-bf70-5266c27737ce button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 切分訓練期和測試期\n",
        "train_start_st = '2020-01-01'\n",
        "test_start_st= '2022-01-01'\n",
        "test_end_dt = '2023-11-30'\n",
        "df_train = df_feature_m[df_feature_m['資料日'] >= train_start_st]\n",
        "df_train = df_train[df_train['資料日'] < test_start_st]\n",
        "df_test = df_feature_m[df_feature_m['資料日'] >= test_start_st]\n",
        "df_test = df_test[df_test['資料日'] <= test_end_dt]\n",
        "\n",
        "##################\n",
        "# 每期選幾檔股票(可調整)\n",
        "portfolio_stock_num = 15\n",
        "##################\n",
        "\n",
        "# 模型訓練及選股\n",
        "# model = xgboost.XGBRegressor()\n",
        "#model = DecisionTreeRegressor(max_depth=3)\n",
        "model = AdaBoostRegressor()\n",
        "model.fit(df_train[feature_list],df_train['下期報酬'])\n",
        "\n",
        "df_test['模型預測分數'] = model.predict(df_test[feature_list])\n",
        "df_test = df_test[(df_test['模型預測分數']>=5)]\n",
        "df_test = df_test.sort_values(['資料日','模型預測分數'],ascending=[1,0])\n",
        "df_select = df_test.groupby('資料日').apply(lambda x : x.head(portfolio_stock_num)).reset_index(drop=True)[['資料日','證券名稱','下期報酬','模型預測分數']]\n",
        "df_select[df_select['資料日']=='2022-01-01']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "S5TfRWHuJTMb",
        "outputId": "58a96728-cc01-45e0-b26c-ace4f6f9a760"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         資料日      證券名稱       下期報酬     模型預測分數\n",
              "0 2022-01-01    1736喬山  12.895146  12.914263\n",
              "1 2022-01-01    2718晶悅   9.121557   7.393900\n",
              "2 2022-01-01  6547高端疫苗   8.970720   7.332537\n",
              "3 2022-01-01    6576逸達   8.636582   6.295613\n",
              "4 2022-01-01   2537聯上發   8.492384   6.257269"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c4b2bbe2-1f8b-4ca0-9c62-3efc2c705ffc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>資料日</th>\n",
              "      <th>證券名稱</th>\n",
              "      <th>下期報酬</th>\n",
              "      <th>模型預測分數</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>1736喬山</td>\n",
              "      <td>12.895146</td>\n",
              "      <td>12.914263</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>2718晶悅</td>\n",
              "      <td>9.121557</td>\n",
              "      <td>7.393900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>6547高端疫苗</td>\n",
              "      <td>8.970720</td>\n",
              "      <td>7.332537</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>6576逸達</td>\n",
              "      <td>8.636582</td>\n",
              "      <td>6.295613</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022-01-01</td>\n",
              "      <td>2537聯上發</td>\n",
              "      <td>8.492384</td>\n",
              "      <td>6.257269</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c4b2bbe2-1f8b-4ca0-9c62-3efc2c705ffc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c4b2bbe2-1f8b-4ca0-9c62-3efc2c705ffc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c4b2bbe2-1f8b-4ca0-9c62-3efc2c705ffc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7d9c1b8c-3e3a-46f5-8ed2-03776d20e2eb\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7d9c1b8c-3e3a-46f5-8ed2-03776d20e2eb')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7d9c1b8c-3e3a-46f5-8ed2-03776d20e2eb button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 113
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "pt=plt.figure().add_subplot(1,1,1)\n",
        "estimators_num=len(model.estimators_)\n",
        "X=range(1,estimators_num+1)\n",
        "pt.plot(list(X),list(model.staged_score(df_train[feature_list],df_train['下期報酬'])),label=\"Traing score\")\n",
        "pt.plot(list(X),list(model.staged_score(df_test[feature_list],df_test['模型預測分數'])),label=\"Testing score\")\n",
        "pt.set_xlabel(\"estimator num\")\n",
        "pt.set_ylabel(\"score\")\n",
        "pt.legend(loc=\"best\")\n",
        "pt.set_title(\"AdaBoostRegressor\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 495
        },
        "id": "hh_vhPXKA5pm",
        "outputId": "16139fdb-095f-490b-e8ba-fec4fd562bd0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'AdaBoostRegressor')"
            ]
          },
          "metadata": {},
          "execution_count": 114
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5.0 投組績效回測"
      ],
      "metadata": {
        "id": "j6kcnJB_QmRW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 讀取價格資料，進行整理\n",
        "df = pd.read_feather('/content/drive/MyDrive/FCU_20231208/Data//價量資料.feather')\n",
        "df.sort_values(by=['證券名稱', '資料日'], ascending=True, inplace=True)\n",
        "df.drop_duplicates(subset=['證券名稱', '資料日'], keep='last', inplace=True)\n",
        "df['資料日'] = pd.to_datetime(df['資料日'])\n",
        "df.set_index('資料日', inplace=True)\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 501
        },
        "id": "jyH46Qf5JbKY",
        "outputId": "0c709265-0372-4f96-aa28-0d66f905912c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              證券名稱     市場別    開盤價    最高價    最低價        收盤價  成交量(千股)  \\\n",
              "資料日                                                                   \n",
              "2018-01-02  1101台泥  TWSE    36.45  36.60  36.05  20.444681  13698.0   \n",
              "2018-01-03  1101台泥  TWSE    36.50  37.35  36.25  20.892171  19959.0   \n",
              "2018-01-04  1101台泥  TWSE    37.35  37.45  36.75  20.808266  14927.0   \n",
              "2018-01-05  1101台泥  TWSE    37.50  37.50  37.05  20.864203  35536.0   \n",
              "2018-01-08  1101台泥  TWSE    37.40  38.30  37.20  21.367628  22660.0   \n",
              "\n",
              "                 成交金額(元)    成交筆數     周轉率  流通在外股數(千股)       個股市值(元)      市值比重  \\\n",
              "資料日                                                                            \n",
              "2018-01-02  4.993709e+08  3932.0  0.3226   4246509.0  1.552099e+11  0.485348   \n",
              "2018-01-03  7.373536e+08  5001.0  0.4700   4246509.0  1.586071e+11  0.491803   \n",
              "2018-01-04  5.553930e+08  5698.0  0.3515   4246509.0  1.579701e+11  0.487705   \n",
              "2018-01-05  1.325927e+09  7554.0  0.8368   4246509.0  1.583948e+11  0.487621   \n",
              "2018-01-08  8.585742e+08  7513.0  0.5336   4246509.0  1.622166e+11  0.497755   \n",
              "\n",
              "            成交金額比重  現金股利率(TEJ)  本益比(TEJ)  股價淨值比(TEJ)  股價營收比(TEJ)  \n",
              "資料日                                                               \n",
              "2018-01-02   0.522        3.45     20.26        1.38        1.63  \n",
              "2018-01-03   0.565        3.38     20.71        1.41        1.66  \n",
              "2018-01-04   0.414        3.39     20.62        1.41        1.65  \n",
              "2018-01-05   0.992        3.38     20.68        1.41        1.66  \n",
              "2018-01-08   0.659        3.30     21.18        1.45        1.70  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-817a3ad5-cacb-4b9f-a62d-abda87a5a103\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>證券名稱</th>\n",
              "      <th>市場別</th>\n",
              "      <th>開盤價</th>\n",
              "      <th>最高價</th>\n",
              "      <th>最低價</th>\n",
              "      <th>收盤價</th>\n",
              "      <th>成交量(千股)</th>\n",
              "      <th>成交金額(元)</th>\n",
              "      <th>成交筆數</th>\n",
              "      <th>周轉率</th>\n",
              "      <th>流通在外股數(千股)</th>\n",
              "      <th>個股市值(元)</th>\n",
              "      <th>市值比重</th>\n",
              "      <th>成交金額比重</th>\n",
              "      <th>現金股利率(TEJ)</th>\n",
              "      <th>本益比(TEJ)</th>\n",
              "      <th>股價淨值比(TEJ)</th>\n",
              "      <th>股價營收比(TEJ)</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>資料日</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2018-01-02</th>\n",
              "      <td>1101台泥</td>\n",
              "      <td>TWSE</td>\n",
              "      <td>36.45</td>\n",
              "      <td>36.60</td>\n",
              "      <td>36.05</td>\n",
              "      <td>20.444681</td>\n",
              "      <td>13698.0</td>\n",
              "      <td>4.993709e+08</td>\n",
              "      <td>3932.0</td>\n",
              "      <td>0.3226</td>\n",
              "      <td>4246509.0</td>\n",
              "      <td>1.552099e+11</td>\n",
              "      <td>0.485348</td>\n",
              "      <td>0.522</td>\n",
              "      <td>3.45</td>\n",
              "      <td>20.26</td>\n",
              "      <td>1.38</td>\n",
              "      <td>1.63</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-03</th>\n",
              "      <td>1101台泥</td>\n",
              "      <td>TWSE</td>\n",
              "      <td>36.50</td>\n",
              "      <td>37.35</td>\n",
              "      <td>36.25</td>\n",
              "      <td>20.892171</td>\n",
              "      <td>19959.0</td>\n",
              "      <td>7.373536e+08</td>\n",
              "      <td>5001.0</td>\n",
              "      <td>0.4700</td>\n",
              "      <td>4246509.0</td>\n",
              "      <td>1.586071e+11</td>\n",
              "      <td>0.491803</td>\n",
              "      <td>0.565</td>\n",
              "      <td>3.38</td>\n",
              "      <td>20.71</td>\n",
              "      <td>1.41</td>\n",
              "      <td>1.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-04</th>\n",
              "      <td>1101台泥</td>\n",
              "      <td>TWSE</td>\n",
              "      <td>37.35</td>\n",
              "      <td>37.45</td>\n",
              "      <td>36.75</td>\n",
              "      <td>20.808266</td>\n",
              "      <td>14927.0</td>\n",
              "      <td>5.553930e+08</td>\n",
              "      <td>5698.0</td>\n",
              "      <td>0.3515</td>\n",
              "      <td>4246509.0</td>\n",
              "      <td>1.579701e+11</td>\n",
              "      <td>0.487705</td>\n",
              "      <td>0.414</td>\n",
              "      <td>3.39</td>\n",
              "      <td>20.62</td>\n",
              "      <td>1.41</td>\n",
              "      <td>1.65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-05</th>\n",
              "      <td>1101台泥</td>\n",
              "      <td>TWSE</td>\n",
              "      <td>37.50</td>\n",
              "      <td>37.50</td>\n",
              "      <td>37.05</td>\n",
              "      <td>20.864203</td>\n",
              "      <td>35536.0</td>\n",
              "      <td>1.325927e+09</td>\n",
              "      <td>7554.0</td>\n",
              "      <td>0.8368</td>\n",
              "      <td>4246509.0</td>\n",
              "      <td>1.583948e+11</td>\n",
              "      <td>0.487621</td>\n",
              "      <td>0.992</td>\n",
              "      <td>3.38</td>\n",
              "      <td>20.68</td>\n",
              "      <td>1.41</td>\n",
              "      <td>1.66</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-01-08</th>\n",
              "      <td>1101台泥</td>\n",
              "      <td>TWSE</td>\n",
              "      <td>37.40</td>\n",
              "      <td>38.30</td>\n",
              "      <td>37.20</td>\n",
              "      <td>21.367628</td>\n",
              "      <td>22660.0</td>\n",
              "      <td>8.585742e+08</td>\n",
              "      <td>7513.0</td>\n",
              "      <td>0.5336</td>\n",
              "      <td>4246509.0</td>\n",
              "      <td>1.622166e+11</td>\n",
              "      <td>0.497755</td>\n",
              "      <td>0.659</td>\n",
              "      <td>3.30</td>\n",
              "      <td>21.18</td>\n",
              "      <td>1.45</td>\n",
              "      <td>1.70</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-817a3ad5-cacb-4b9f-a62d-abda87a5a103')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-817a3ad5-cacb-4b9f-a62d-abda87a5a103 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-817a3ad5-cacb-4b9f-a62d-abda87a5a103');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-75790a86-b232-4e4c-a875-4b5ad711f339\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75790a86-b232-4e4c-a875-4b5ad711f339')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-75790a86-b232-4e4c-a875-4b5ad711f339 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5.1 選股投組回測"
      ],
      "metadata": {
        "id": "Px0DqKutV4PU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 每月初收盤價\n",
        "monthly_st_price = df.groupby('證券名稱').resample('M')['收盤價'].first().unstack().transpose()\n",
        "\n",
        "# 每月底收盤價\n",
        "monthly_end_price = df.groupby('證券名稱').resample('M')['收盤價'].last().unstack().transpose()\n",
        "\n",
        "# 這個月初到這個月底的報酬\n",
        "monthly_returns = monthly_end_price/monthly_st_price - 1\n",
        "# monthly_returns = monthly_end_price.pct_change()\n",
        "\n",
        "print(monthly_returns.shape)\n",
        "monthly_returns.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 461
        },
        "id": "z72028DdJdhW",
        "outputId": "5240b09f-c9ef-4c30-c054-a1a7f8b1f52c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(71, 1759)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "證券名稱          1101台泥    1102亞泥    1103嘉泥    1104環泥    1108幸福    1109信大  \\\n",
              "資料日                                                                      \n",
              "2018-01-31  0.030096  0.065603  0.007435 -0.006522  0.010714  0.026022   \n",
              "2018-02-28 -0.023747 -0.053333 -0.069853 -0.017505 -0.018935  0.032491   \n",
              "2018-03-31 -0.012162  0.012411 -0.075397  0.000000 -0.053528 -0.003521   \n",
              "2018-04-30  0.114598  0.106272  0.004202 -0.015660 -0.011673 -0.014286   \n",
              "2018-05-31  0.067319  0.031201  0.112971 -0.040909  0.061438 -0.007194   \n",
              "\n",
              "證券名稱          1110東泥    1201味全    1203味王    1210大成  ...    9944新麗   9945潤泰新  \\\n",
              "資料日                                                 ...                       \n",
              "2018-01-31 -0.044369  0.116390  0.057312  0.010401  ...  0.002545  0.045313   \n",
              "2018-02-28 -0.003559 -0.056723 -0.022472  0.004438  ...  0.010178 -0.028701   \n",
              "2018-03-31  0.003584  0.093960  0.003817 -0.011445  ... -0.015113  0.049231   \n",
              "2018-04-30  0.000000 -0.024845 -0.013410  0.103597  ... -0.015345  0.045455   \n",
              "2018-05-31 -0.007168  0.012712  0.005848  0.026490  ... -0.010390  0.004167   \n",
              "\n",
              "證券名稱        9946三發地產    9949琉園   9950萬國通    9951皇田    9955佳龍   9958世紀鋼  \\\n",
              "資料日                                                                      \n",
              "2018-01-31 -0.033457 -0.017857  0.003676 -0.116959 -0.068323  0.873391   \n",
              "2018-02-28 -0.015326 -0.031963 -0.054945 -0.042763 -0.105085  0.302083   \n",
              "2018-03-31  0.031128 -0.018868  0.027132 -0.047945  0.022222  0.267717   \n",
              "2018-04-30  0.069597 -0.004739 -0.065385  0.003597  0.003636 -0.105263   \n",
              "2018-05-31 -0.017422 -0.038095  0.012097 -0.153571 -0.051095 -0.250000   \n",
              "\n",
              "證券名稱         9960邁達康    9962有益  \n",
              "資料日                             \n",
              "2018-01-31 -0.038514  0.014563  \n",
              "2018-02-28 -0.063291  0.028846  \n",
              "2018-03-31  0.035556 -0.018349  \n",
              "2018-04-30 -0.046617  0.009174  \n",
              "2018-05-31 -0.033762 -0.013575  \n",
              "\n",
              "[5 rows x 1759 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9493ddd1-0b66-4e83-948a-2bfaa545bcf0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>證券名稱</th>\n",
              "      <th>1101台泥</th>\n",
              "      <th>1102亞泥</th>\n",
              "      <th>1103嘉泥</th>\n",
              "      <th>1104環泥</th>\n",
              "      <th>1108幸福</th>\n",
              "      <th>1109信大</th>\n",
              "      <th>1110東泥</th>\n",
              "      <th>1201味全</th>\n",
              "      <th>1203味王</th>\n",
              "      <th>1210大成</th>\n",
              "      <th>...</th>\n",
              "      <th>9944新麗</th>\n",
              "      <th>9945潤泰新</th>\n",
              "      <th>9946三發地產</th>\n",
              "      <th>9949琉園</th>\n",
              "      <th>9950萬國通</th>\n",
              "      <th>9951皇田</th>\n",
              "      <th>9955佳龍</th>\n",
              "      <th>9958世紀鋼</th>\n",
              "      <th>9960邁達康</th>\n",
              "      <th>9962有益</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>資料日</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2018-01-31</th>\n",
              "      <td>0.030096</td>\n",
              "      <td>0.065603</td>\n",
              "      <td>0.007435</td>\n",
              "      <td>-0.006522</td>\n",
              "      <td>0.010714</td>\n",
              "      <td>0.026022</td>\n",
              "      <td>-0.044369</td>\n",
              "      <td>0.116390</td>\n",
              "      <td>0.057312</td>\n",
              "      <td>0.010401</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002545</td>\n",
              "      <td>0.045313</td>\n",
              "      <td>-0.033457</td>\n",
              "      <td>-0.017857</td>\n",
              "      <td>0.003676</td>\n",
              "      <td>-0.116959</td>\n",
              "      <td>-0.068323</td>\n",
              "      <td>0.873391</td>\n",
              "      <td>-0.038514</td>\n",
              "      <td>0.014563</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-02-28</th>\n",
              "      <td>-0.023747</td>\n",
              "      <td>-0.053333</td>\n",
              "      <td>-0.069853</td>\n",
              "      <td>-0.017505</td>\n",
              "      <td>-0.018935</td>\n",
              "      <td>0.032491</td>\n",
              "      <td>-0.003559</td>\n",
              "      <td>-0.056723</td>\n",
              "      <td>-0.022472</td>\n",
              "      <td>0.004438</td>\n",
              "      <td>...</td>\n",
              "      <td>0.010178</td>\n",
              "      <td>-0.028701</td>\n",
              "      <td>-0.015326</td>\n",
              "      <td>-0.031963</td>\n",
              "      <td>-0.054945</td>\n",
              "      <td>-0.042763</td>\n",
              "      <td>-0.105085</td>\n",
              "      <td>0.302083</td>\n",
              "      <td>-0.063291</td>\n",
              "      <td>0.028846</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-03-31</th>\n",
              "      <td>-0.012162</td>\n",
              "      <td>0.012411</td>\n",
              "      <td>-0.075397</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.053528</td>\n",
              "      <td>-0.003521</td>\n",
              "      <td>0.003584</td>\n",
              "      <td>0.093960</td>\n",
              "      <td>0.003817</td>\n",
              "      <td>-0.011445</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.015113</td>\n",
              "      <td>0.049231</td>\n",
              "      <td>0.031128</td>\n",
              "      <td>-0.018868</td>\n",
              "      <td>0.027132</td>\n",
              "      <td>-0.047945</td>\n",
              "      <td>0.022222</td>\n",
              "      <td>0.267717</td>\n",
              "      <td>0.035556</td>\n",
              "      <td>-0.018349</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-04-30</th>\n",
              "      <td>0.114598</td>\n",
              "      <td>0.106272</td>\n",
              "      <td>0.004202</td>\n",
              "      <td>-0.015660</td>\n",
              "      <td>-0.011673</td>\n",
              "      <td>-0.014286</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-0.024845</td>\n",
              "      <td>-0.013410</td>\n",
              "      <td>0.103597</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.015345</td>\n",
              "      <td>0.045455</td>\n",
              "      <td>0.069597</td>\n",
              "      <td>-0.004739</td>\n",
              "      <td>-0.065385</td>\n",
              "      <td>0.003597</td>\n",
              "      <td>0.003636</td>\n",
              "      <td>-0.105263</td>\n",
              "      <td>-0.046617</td>\n",
              "      <td>0.009174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2018-05-31</th>\n",
              "      <td>0.067319</td>\n",
              "      <td>0.031201</td>\n",
              "      <td>0.112971</td>\n",
              "      <td>-0.040909</td>\n",
              "      <td>0.061438</td>\n",
              "      <td>-0.007194</td>\n",
              "      <td>-0.007168</td>\n",
              "      <td>0.012712</td>\n",
              "      <td>0.005848</td>\n",
              "      <td>0.026490</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.010390</td>\n",
              "      <td>0.004167</td>\n",
              "      <td>-0.017422</td>\n",
              "      <td>-0.038095</td>\n",
              "      <td>0.012097</td>\n",
              "      <td>-0.153571</td>\n",
              "      <td>-0.051095</td>\n",
              "      <td>-0.250000</td>\n",
              "      <td>-0.033762</td>\n",
              "      <td>-0.013575</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 1759 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9493ddd1-0b66-4e83-948a-2bfaa545bcf0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9493ddd1-0b66-4e83-948a-2bfaa545bcf0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9493ddd1-0b66-4e83-948a-2bfaa545bcf0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-97637bcf-d17e-46ea-888b-9260b5a6e338\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-97637bcf-d17e-46ea-888b-9260b5a6e338')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-97637bcf-d17e-46ea-888b-9260b5a6e338 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 116
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 設定回測期間\n",
        "start_dt = '2022-01-01'\n",
        "end_dt = '2023-11-30'\n",
        "\n",
        "# 換倉日\n",
        "reb_date = df_select_m[(df_select_m['資料日'] > start_dt) & (df_select_m['資料日'] < end_dt)]['資料日'].unique()\n",
        "\n",
        "# 計算投組每月報酬\n",
        "portfolio_return = []\n",
        "for i in range(len(reb_date)):\n",
        "    reb_ticker_list = df_select_m[df_select_m['資料日'] == reb_date[i]]['證券名稱'].values\n",
        "\n",
        "    mean_return = np.mean(monthly_returns[reb_ticker_list].loc[reb_date[i] + MonthEnd(n=0)])\n",
        "    portfolio_return.append(mean_return)\n",
        "\n",
        "# 計算投組累積報酬\n",
        "portfolio_return = np.insert(portfolio_return,0,[0]) #起始日報酬為0\n",
        "portfolio_return = np.array(portfolio_return) + 1\n",
        "portfolio_cumulative_return = portfolio_return.cumprod()\n",
        "\n",
        "df_portfolio_tr = pd.DataFrame(index = np.insert(reb_date,0,reb_date[0]-MonthEnd(n=1)))\n",
        "df_portfolio_tr['Portfolio Return'] = portfolio_return - 1\n",
        "df_portfolio_tr['Portfolio Total Return'] = portfolio_cumulative_return\n",
        "print(len(df_portfolio_tr))\n",
        "df_portfolio_tr.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "8KWWgkYAJf5D",
        "outputId": "b4cccacc-e835-46bd-be2f-15fef1f0f66c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "23\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Portfolio Return  Portfolio Total Return\n",
              "2022-01-31          0.000000                1.000000\n",
              "2022-02-01          0.012847                1.012847\n",
              "2022-03-01          0.023550                1.036700\n",
              "2022-04-01          0.005475                1.042376\n",
              "2022-05-01         -0.001044                1.041288"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e023e796-a0fe-41fd-9c88-e49adf19542a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Portfolio Return</th>\n",
              "      <th>Portfolio Total Return</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-01-31</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-01</th>\n",
              "      <td>0.012847</td>\n",
              "      <td>1.012847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-01</th>\n",
              "      <td>0.023550</td>\n",
              "      <td>1.036700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04-01</th>\n",
              "      <td>0.005475</td>\n",
              "      <td>1.042376</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-05-01</th>\n",
              "      <td>-0.001044</td>\n",
              "      <td>1.041288</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e023e796-a0fe-41fd-9c88-e49adf19542a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e023e796-a0fe-41fd-9c88-e49adf19542a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e023e796-a0fe-41fd-9c88-e49adf19542a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fed8dbaa-e63c-4f1c-8c2d-78f1e7cc3d2c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fed8dbaa-e63c-4f1c-8c2d-78f1e7cc3d2c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fed8dbaa-e63c-4f1c-8c2d-78f1e7cc3d2c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 117
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5.2 加權報酬指數回測(Benchmark)"
      ],
      "metadata": {
        "id": "Bj6Tav6cV9Xq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 讀取Benchmark資料\n",
        "benchmark = pd.read_feather('/content/drive/MyDrive/FCU_20231208/Data//加權報酬指數.feather')\n",
        "benchmark.set_index('資料日',inplace=True)\n",
        "benchmark.index = pd.to_datetime(benchmark.index)\n",
        "\n",
        "# 每月初收盤價\n",
        "monthly_st_price_bm = benchmark.resample('M')['收盤價'].first()\n",
        "# 每月底收盤價\n",
        "monthly_end_price_bm = benchmark.resample('M')['收盤價'].last()\n",
        "\n",
        "# 這個月初到這個月底的報酬\n",
        "# monthly_returns_bm = monthly_end_price_bm.pct_change()\n",
        "monthly_returns_bm = monthly_end_price_bm/monthly_st_price_bm - 1\n",
        "monthly_returns_bm = monthly_returns_bm.loc[[i + MonthEnd(n=0)for i in reb_date]]\n",
        "\n",
        "# 計算Benchmark累積報酬\n",
        "monthly_returns_bm = np.insert(np.array(monthly_returns_bm),0,[0]) #起始日報酬為0\n",
        "monthly_returns_bm = np.array(monthly_returns_bm) + 1\n",
        "bm_portfolio_tr = monthly_returns_bm.cumprod()\n",
        "\n",
        "df_benchmark_tr = pd.DataFrame(index = np.insert(reb_date,0,reb_date[0]-MonthEnd(n=1)))\n",
        "df_benchmark_tr['Benchmark Return'] = monthly_returns_bm - 1\n",
        "df_benchmark_tr['Benchmark Total Return'] = bm_portfolio_tr\n",
        "df_benchmark_tr\n",
        "\n",
        "print(len(df_benchmark_tr))\n",
        "df_benchmark_tr.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "xA4PPppzJiJK",
        "outputId": "9c500775-1cc1-474e-e322-6f609b475ee9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "23\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Benchmark Return  Benchmark Total Return\n",
              "2022-01-31          0.000000                1.000000\n",
              "2022-02-01         -0.013786                0.986214\n",
              "2022-03-01         -0.009513                0.976833\n",
              "2022-04-01         -0.058098                0.920081\n",
              "2022-05-01          0.018823                0.937400"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-17b37da9-c261-4274-94c6-2e0904e3d581\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Benchmark Return</th>\n",
              "      <th>Benchmark Total Return</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2022-01-31</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-02-01</th>\n",
              "      <td>-0.013786</td>\n",
              "      <td>0.986214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-03-01</th>\n",
              "      <td>-0.009513</td>\n",
              "      <td>0.976833</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-04-01</th>\n",
              "      <td>-0.058098</td>\n",
              "      <td>0.920081</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2022-05-01</th>\n",
              "      <td>0.018823</td>\n",
              "      <td>0.937400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-17b37da9-c261-4274-94c6-2e0904e3d581')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-17b37da9-c261-4274-94c6-2e0904e3d581 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-17b37da9-c261-4274-94c6-2e0904e3d581');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2fd8f3e2-52e0-43d6-ae2f-c64de857bfc7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fd8f3e2-52e0-43d6-ae2f-c64de857bfc7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2fd8f3e2-52e0-43d6-ae2f-c64de857bfc7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 118
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 績效呈現"
      ],
      "metadata": {
        "id": "R-WrExKsWFga"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 績效指標\n",
        "def perf_cal(df_tr, name_1, name_2):\n",
        "    status = {}\n",
        "    status['最大回撤'] = -((df_tr[name_1].cummax() - df_tr[name_1])/df_tr[name_1].cummax()).max()\n",
        "    status['累積報酬'] = [df_tr[name_1].iloc[-1]]\n",
        "    status['年化報酬'] = [(df_tr[name_1].iloc[-1] ** (12/len(df_tr))-1)]\n",
        "    std = df_tr[name_2].std() * np.sqrt(12)\n",
        "    status['Sharpe Ratio'] = status['年化報酬'] / std\n",
        "    status = pd.DataFrame(status).transpose()\n",
        "    status.columns = [name_1]\n",
        "    return status\n",
        "\n",
        "# 累積報酬圖\n",
        "def plot_total_return(df_portfolio_tr,df_benchmark_tr, name):\n",
        "    fig, ax = plt.subplots(figsize=(8, 4))\n",
        "    ax.plot(df_portfolio_tr.index, df_portfolio_tr['Portfolio Total Return'], label='Portfolio', linewidth=3)\n",
        "    ax.plot(df_benchmark_tr.index, df_benchmark_tr['Benchmark Total Return'], label='Benchmark', linewidth=3)\n",
        "    ax.yaxis.set_major_formatter(mticker.PercentFormatter(1))\n",
        "    plt.legend(loc='upper left')\n",
        "    plt.title('Total Return')\n",
        "    plt.xticks(rotation=20)\n",
        "    plt.tight_layout()\n",
        "\n",
        "# 月度勝率圖\n",
        "def plot_monthly_return(df_portfolio_tr, df_benchmark_tr):\n",
        "    df_portfolio_tr['year'] = df_portfolio_tr.index.year\n",
        "    df_portfolio_tr['month'] = df_portfolio_tr.index.month\n",
        "    df_benchmark_tr['year'] = df_benchmark_tr.index.year\n",
        "    df_benchmark_tr['month'] = df_benchmark_tr.index.month\n",
        "    rt_pivot_strategy = df_portfolio_tr.pivot(index='year', columns='month', values='Portfolio Return')\n",
        "    rt_pivot_benchmark = df_benchmark_tr.pivot(index='year', columns='month', values='Benchmark Return')\n",
        "    rt_pivot_excess = rt_pivot_strategy - rt_pivot_benchmark\n",
        "\n",
        "    cmap1= LinearSegmentedColormap.from_list(\"custom\", [(0, \"green\"), (0.5, \"white\"), (1, \"red\")])\n",
        "    fig, ax = plt.subplots(figsize=(8,4))\n",
        "    sns.heatmap(rt_pivot_excess.T,annot=True, xticklabels= True, yticklabels= True, cmap=cmap1, center=0, fmt='.1%', cbar=False, linewidths=0.5)\n",
        "    plt.yticks(rotation=0)\n",
        "\n",
        "\n",
        "# 呼叫績效呈現函式\n",
        "plot_total_return(df_portfolio_tr,df_benchmark_tr, 'Portfolio_1')\n",
        "plot_monthly_return(df_portfolio_tr, df_benchmark_tr)\n",
        "portfolio_perf = perf_cal(df_portfolio_tr, 'Portfolio Total Return','Portfolio Return')\n",
        "benchmark_perf = perf_cal(df_benchmark_tr, 'Benchmark Total Return','Benchmark Return')\n",
        "summary_perf = pd.concat([portfolio_perf,benchmark_perf],axis=1)\n",
        "summary_perf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 940
        },
        "id": "imnt2ETzJj5V",
        "outputId": "4c400efe-41cd-4f1b-e2e0-2d856a43f8ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              Portfolio Total Return  Benchmark Total Return\n",
              "最大回撤                       -0.104094               -0.191564\n",
              "累積報酬                        1.398677                1.058540\n",
              "年化報酬                        0.191315                0.030127\n",
              "Sharpe Ratio                1.139586                0.153376"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3badd875-c710-4947-b38e-db7582113d3b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Portfolio Total Return</th>\n",
              "      <th>Benchmark Total Return</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>最大回撤</th>\n",
              "      <td>-0.104094</td>\n",
              "      <td>-0.191564</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>累積報酬</th>\n",
              "      <td>1.398677</td>\n",
              "      <td>1.058540</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>年化報酬</th>\n",
              "      <td>0.191315</td>\n",
              "      <td>0.030127</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sharpe Ratio</th>\n",
              "      <td>1.139586</td>\n",
              "      <td>0.153376</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3badd875-c710-4947-b38e-db7582113d3b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3badd875-c710-4947-b38e-db7582113d3b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3badd875-c710-4947-b38e-db7582113d3b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-340b0134-e6fb-4684-abc6-5c980f491986\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-340b0134-e6fb-4684-abc6-5c980f491986')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-340b0134-e6fb-4684-abc6-5c980f491986 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_b3342b2f-224e-4f95-a07f-8d475428bc13\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('summary_perf')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_b3342b2f-224e-4f95-a07f-8d475428bc13 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('summary_perf');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 119
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x400 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}